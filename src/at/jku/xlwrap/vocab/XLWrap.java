
/**
 * Copyright 2009 Andreas Langegger, andreas@langegger.at, Austria
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package at.jku.xlwrap.vocab;

import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;


/**
 * Vocabulary definitions from file:vocabulary/purl.org/NET/xlwrap.n3
 * @author Auto-generated by schemagen on 13 Oct 2009 12:37
 */
public class XLWrap {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.RDFS_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://purl.org/NET/xlwrap#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    



    /* Vocabulary properties */

    /** <p>An xl:Expr, which is evaluated each time before the template is transformed. 
     *  Breaks the transform operation if false and resumes with the next stage from 
     *  the previous transform.</p>
     */
    public static final OntProperty breakCondition = m_model.createOntProperty( "http://purl.org/NET/xlwrap#breakCondition" );
    
    /** <p>cache directory property specified in dataset assembler configuration</p> */
    public static final OntProperty cacheDir = m_model.createOntProperty( "http://purl.org/NET/xlwrap#cacheDir" );
    
    /** <p>a constant graph is included into the target graph once, xl:Expr expressions 
     *  are evaluated</p>
     */
    public static final OntProperty constantGraph = m_model.createOntProperty( "http://purl.org/NET/xlwrap#constantGraph" );
    
    /** <p>references a spreadsheet file URI, e.g. file:// or http://...; this is the 
     *  base filename for relative cell references</p>
     */
    public static final OntProperty fileName = m_model.createOntProperty( "http://purl.org/NET/xlwrap#fileName" );
    
    /** <p>Sequence of files for the xl:FileRepeat transformation; elements must be plain 
     *  literals specifying existing file names</p>
     */
    public static final OntProperty fileNames = m_model.createOntProperty( "http://purl.org/NET/xlwrap#fileNames" );
    
    /** <p>a custom function library (java package) to load</p> */
    public static final OntProperty functionLib = m_model.createOntProperty( "http://purl.org/NET/xlwrap#functionLib" );
    
    /** <p>Can be used to link blank nodes in a template graph.</p> */
    public static final OntProperty id = m_model.createOntProperty( "http://purl.org/NET/xlwrap#id" );
    
    /** <p>if offline is true, the mapping will not be processed by XLWrap-Server</p> */
    public static final OntProperty offline = m_model.createOntProperty( "http://purl.org/NET/xlwrap#offline" );
    
    /** <p>NOT YET SUPPORTED!!! WILL AUTO-DETECT - the value must be a valid instance 
     *  of xl:ParseProfile defined by this vocabulary</p>
     */
    public static final OntProperty parseProfile = m_model.createOntProperty( "http://purl.org/NET/xlwrap#parseProfile" );
    
    /** <p>Repeat times</p> */
    public static final OntProperty repeat = m_model.createOntProperty( "http://purl.org/NET/xlwrap#repeat" );
    
    /** <p>Restricts the transformation to a multi range (ranges separated by semicolons)</p> */
    public static final OntProperty restriction = m_model.createOntProperty( "http://purl.org/NET/xlwrap#restriction" );
    
    /** <p>named sheet of a spreadsheet workbook; this is the base sheet for relative 
     *  cell references; either this one or sheetNumber is required</p>
     */
    public static final OntProperty sheetName = m_model.createOntProperty( "http://purl.org/NET/xlwrap#sheetName" );
    
    public static final OntProperty sheetNames = m_model.createOntProperty( "http://purl.org/NET/xlwrap#sheetNames" );
    
    /** <p>number of a sheet in a spreadsheet workbook; this is the base sheet for relative 
     *  cell references; either this one or sheetName is required</p>
     */
    public static final OntProperty sheetNumber = m_model.createOntProperty( "http://purl.org/NET/xlwrap#sheetNumber" );
    
    /** <p>An xl:Expr, which is evaluated each time before a template is applied. Skips 
     *  generation of triples if false and resumes.</p>
     */
    public static final OntProperty skipCondition = m_model.createOntProperty( "http://purl.org/NET/xlwrap#skipCondition" );
    
    /** <p>Shift steps in terms of columns, rows, or sheets</p> */
    public static final OntProperty steps = m_model.createOntProperty( "http://purl.org/NET/xlwrap#steps" );
    
    /** <p>associates map templates to mappings; the property is used multiple times 
     *  to specify templates</p>
     */
    public static final OntProperty template = m_model.createOntProperty( "http://purl.org/NET/xlwrap#template" );
    
    /** <p>the template graph of the mapping template; contains xl:Expr to reference 
     *  cells; is specified directly in the mapping file as named graphs</p>
     */
    public static final OntProperty templateGraph = m_model.createOntProperty( "http://purl.org/NET/xlwrap#templateGraph" );
    
    /** <p>a sequence of transformations which will be executed in order; elements must 
     *  be valid instances of xl:Transformation</p>
     */
    public static final OntProperty transform = m_model.createOntProperty( "http://purl.org/NET/xlwrap#transform" );
    
    /** <p>Used to assign a dynamic URI to an RDF resource based on a xl:Expr.</p> */
    public static final OntProperty uri = m_model.createOntProperty( "http://purl.org/NET/xlwrap#uri" );
    
    /** <p>watch directory property specified in dataset assembler configuration</p> */
    public static final OntProperty watchDir = m_model.createOntProperty( "http://purl.org/NET/xlwrap#watchDir" );
    

    /* Vocabulary classes */

    /** <p>Represents an XLWrap Expression, which is evaluated during the mapping process. 
     *  Expressions are used in named template graphs in the TriG file. The documentation 
     *  for expressions can be found at http://xlwrap.sourceforge.net/</p>
     */
    public static final OntClass Expr = m_model.createClass( "http://purl.org/NET/xlwrap#Expr" );
    
    /** <p>Represents a single mapping from spreadsheets to one RDF graph; can be applied 
     *  multiple times by adding transform operations</p>
     */
    public static final OntClass MapTemplate = m_model.createClass( "http://purl.org/NET/xlwrap#MapTemplate" );
    
    /** <p>Represents a formal mapping from spreadsheets to RDF graphs; contains multiple 
     *  MapTemplates</p>
     */
    public static final OntClass Mapping = m_model.createClass( "http://purl.org/NET/xlwrap#Mapping" );
    
    /** <p>A profile used to parse CSV files</p> */
    public static final OntClass ParseProfile = m_model.createClass( "http://purl.org/NET/xlwrap#ParseProfile" );
    
    /** <p>Abstract super class of transformations</p> */
    public static final OntClass Transformation = m_model.createClass( "http://purl.org/NET/xlwrap#Transformation" );
    
    /** <p>Jena Assemler specification for a virtual XLWrap dataset</p> */
    public static final OntClass XLWrapDataset = m_model.createClass( "http://purl.org/NET/xlwrap#XLWrapDataset" );
    

    /* Vocabulary individuals */

    /** <p>Shifts the template graph at the column axis</p> */
    public static final Individual ColShift = m_model.createIndividual( "http://purl.org/NET/xlwrap#ColShift", m_model.createClass( "http://purl.org/NET/xlwrap#Shift" ) );
    
    /** <p>Applies the template graph to a set of files</p> */
    public static final Individual FileRepeat = m_model.createIndividual( "http://purl.org/NET/xlwrap#FileRepeat", Transformation );
    
    /** <p>Shifts the template graph at the row axis</p> */
    public static final Individual RowShift = m_model.createIndividual( "http://purl.org/NET/xlwrap#RowShift", m_model.createClass( "http://purl.org/NET/xlwrap#Shift" ) );
    
    /** <p>Applies the template graph to a set of sheets</p> */
    public static final Individual SheetRepeat = m_model.createIndividual( "http://purl.org/NET/xlwrap#SheetRepeat", Transformation );
    
    /** <p>Shifts the template graph at the sheet axis</p> */
    public static final Individual SheetShift = m_model.createIndividual( "http://purl.org/NET/xlwrap#SheetShift", m_model.createClass( "http://purl.org/NET/xlwrap#Shift" ) );
    
    /** <p>Abstract super class of shift transformations</p> */
    public static final Individual Shift = m_model.createIndividual( "http://purl.org/NET/xlwrap#Shift", Transformation );
    
    public static final Individual comma_quoted = m_model.createIndividual( "http://purl.org/NET/xlwrap#comma_quoted", ParseProfile );
    
    public static final Individual comma_unquoted = m_model.createIndividual( "http://purl.org/NET/xlwrap#comma_unquoted", ParseProfile );
    
    public static final Individual semicolon_quoted = m_model.createIndividual( "http://purl.org/NET/xlwrap#semicolon_quoted", ParseProfile );
    
    public static final Individual semicolon_unquoted = m_model.createIndividual( "http://purl.org/NET/xlwrap#semicolon_unquoted", ParseProfile );
    
    public static final Individual tab_quoted = m_model.createIndividual( "http://purl.org/NET/xlwrap#tab_quoted", ParseProfile );
    
    public static final Individual tab_unquoted = m_model.createIndividual( "http://purl.org/NET/xlwrap#tab_unquoted", ParseProfile );
    
}

/*
@footer@
*/

